<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Protocols &#8211; Phocean.net</title>
	<atom:link href="/blog-archive/tag/protocols/feed" rel="self" type="application/rss+xml" />
	<link>/blog-archive</link>
	<description>Computer Security Blog</description>
	<lastBuildDate>Fri, 24 Feb 2017 21:17:51 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.10</generator>
	<item>
		<title>Perl : how to monitor a service remotely using sockets</title>
		<link>/blog-archive/2007/07/15/perl-how-to-monitor-a-service-remotely-using-sockets.html</link>
		<pubDate>Sun, 15 Jul 2007 17:59:55 +0000</pubDate>
		<dc:creator><![CDATA[phocean]]></dc:creator>
				<category><![CDATA[Network]]></category>
		<category><![CDATA[OpenBSD]]></category>
		<category><![CDATA[IPSEC]]></category>
		<category><![CDATA[Isakmpd]]></category>
		<category><![CDATA[IsakmpdMon]]></category>
		<category><![CDATA[Perl]]></category>
		<category><![CDATA[Protocols]]></category>

		<guid isPermaLink="false">http://www.phocean.net/?p=64</guid>
		<description><![CDATA[I came to program my first Perl script based on sockets, after setting an IPSEC tunnel.

This tunnel is linking the remote peer and the local peer through an OpenBSD VPN gateway (managed with Isakmp).

The problem is that this connection is limited time, for access right reason. So it is not a 24 hours standard tunnel, but rather an on-demand type connection.

Note that the connection is automatically reseted by the remote peer, by invaliding the cookie of the connection and therefore obliging to renegotiate the VPN tunnel from the beginning : phase 1 of the key exchange.

In one word, the Isakmp service has to be restarted every time we need the tunnel to be up.

Of course, this is not the purpose of Isakmp to have such a mecanism and what is interesting is to start the tunnel from the local peer, every time it needs to do some transfer.

The graph below summarizes the situation :

IPSEC tunnel with OpenBSD as a VPN gateway

That why I came to develop a script that listen on a socket and allow that peer to remotely restart the Isakmp service.]]></description>
				<content:encoded><![CDATA[<p>I came to program my first Perl script based on sockets, after setting an IPSEC tunnel.</p>
<p>This tunnel is linking the remote peer and the local peer through an OpenBSD VPN gateway (managed with Isakmp).</p>
<p>The problem is that time allowed for this connection is limited, for security policy reasons. So it is not a 24- hour standard tunnel, but rather an on-demand type connection.</p>
<p>Note that the connection is automatically reset by the remote peer, by invalidating the connection cookie and therefore oblige to renegotiate the VPN tunnel from the beginning (phase 1 of the key exchange).</p>
<p>In other words, the Isakmp service has to be restarted every time we need the tunnel to be up.</p>
<p>Of course, it is not the purpose of Isakmp to have such a mechanism and what we want is to start the tunnel from the local peer, every time it needs to do some transfer.</p>
<p>The graph below summarizes the situation :</p>
<p style="text-align: center;"><img src="/blog-archive/wp-content/uploads/2007/07/ipsec-tunnel.png" alt="IPSEC tunnel with OpenBSD as a VPN gateway" /></p>
<p>That is why I came to develop a script that opens a socket and allows the peer to remotely restart the Isakmp service.</p>
<p><span id="more-64"></span></p>
<p>Perl is once again the perfect language for someone like me, who is not a developer. My script uses mainly 2 CPAN modules : <a title="NetServer::generic" href="http://http://search.cpan.org/~chstross/NetServer-Generic-1.03/Generic.pm" target="_blank">NetServer::Generic</a> to manage the socket and <a title="Proc::ProcessTable" href="http://search.cpan.org/~durist/Proc-ProcessTable-0.41/ProcessTable.pm" target="_blank">Proc::ProcessTable</a> to get the PID of a running process.</p>
<p>You can dowload it here : <strong><a title="IsakmpdMon" href="/blog-archive/wp-content/uploads/2007/07/isakmpdmon.zip">IsakmpdMon</a></strong>.</p>
<p>And here is the documentation on how to use it : <a title="IsakmpdMon Synopsys" href="/blog-archive/wp-content/uploads/2007/07/isakmpdmon.html"><strong>IsakmpdMon Synopsys</strong>.</a></p>
<p><strong>ATTENTION</strong> : for security reason, only trusted IPs should be allowed to send the commands.</p>
<p>To have your commands accepted, edit the line :</p>
<pre>my ($allowed) = ['10\.80\.1\.2'];</pre>
<p>with your IPs. It can be a list of IPs or hostnames separated by commas. You can use some jockers (*) for the names. Please refer to the <a title="NetServer::generic" href="http://http://search.cpan.org/~chstross/NetServer-Generic-1.03/Generic.pm" target="_blank">NetServer::Generic</a> documentation for more info.</p>
<p>Note that this script can be adapted to any usage to manage all kinds of services remotely&#8230;</p>
]]></content:encoded>
			</item>
		<item>
		<title>OpenVPN and DNS on a linux client</title>
		<link>/blog-archive/2006/12/07/openvpn-and-dns-on-a-linux-client.html</link>
		<comments>/blog-archive/2006/12/07/openvpn-and-dns-on-a-linux-client.html#comments</comments>
		<pubDate>Thu, 07 Dec 2006 16:42:00 +0000</pubDate>
		<dc:creator><![CDATA[phocean]]></dc:creator>
				<category><![CDATA[Cryptography]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Network]]></category>
		<category><![CDATA[News]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[System]]></category>
		<category><![CDATA[DNS]]></category>
		<category><![CDATA[OpenVPN]]></category>
		<category><![CDATA[Protocols]]></category>

		<guid isPermaLink="false">http://192.168.1.10/wordpress/?p=12</guid>
		<description><![CDATA[<p>I got a weired issue with Linux clients while it worked fine with Windows machines. For some reason, the /etc/resolv.conf did not get updated.</p> <p>I found out a workaround thanks to <a hreflang="en" href="http://www.smop.co.uk/node/69">this page</a>.</p> Of course, your server configuration file must contain (if 192.168.1.1 is your DNS server):<br /><blockquote><p><code>push &#34;dhcp-option DNS 192.168.1.1&#34;</code></p> </blockquote><br />]]></description>
				<content:encoded><![CDATA[<p>I got a weired issue with Linux clients while it worked fine with Windows machines. For some reason, the /etc/resolv.conf did not get updated.  I found out a workaround thanks to <a hreflang="en" href="http://www.smop.co.uk/node/69">this page</a>.  Of course, your server configuration file must contain (if 192.168.1.1 is your DNS server):</p>
<pre>push &quot;dhcp-option DNS 192.168.1.1&quot;</pre>
<p><span id="more-12"></span> First, you will need the resolvconf program. In debian :</p>
<pre>$ apt-get install resolvconf</pre>
<p>Then, you will need to add these lines into the configuration file of your Linux client (let&#8217;s say /etc/openvpn/client.conf) : </p>
<pre>up /etc/openvpn/domain.up plugin /usr/lib/openvpn/openvpn-down-root.so /etc/openvpn/domain.down</pre>
<p>The plugin provided by OpenVpn gives back root privilege (when initialized, OpenVPN needs root access but drops it soon).<br />
Now let&#8217;s create the scripts :  </p>
<p><strong>/etc/openvpn/domain.up</strong> : </p>
<pre> #!/bin/sh
    # really naff script to add nameserver entry on up
    DEV=$1    
    set | sed -n &quot;      s/^foreign_option_.* DNS \(.*\)'/nameserver \1/; T next; p;
    :next; s/^foreign_option_.* DOMAIN \(.*\)'/domain \1/; T; p;
      &quot; | resolvconf -a $DEV
    resolvconf -u</pre>
<p><strong>/etc/openvpn/domain.dow</strong>n : </p>
<pre> #!/bin/sh
  # really naff script to delete nameserver entry on down
  DEV=$1
  resolvconf -d $DEV
  resolvconf -u</pre>
<p>Now let&#8217;s give them the suitable rights :</p>
<pre>$ chmod +x domain*</pre>
<p>Finally, just restart openvpn and that should be fine !</p>
<p><strong>UPDATE</strong> <strong>2008/07/11</strong> : The two scripts above are kind of obsolete, because, at least in Debian Etch, a similar script is included in the OpenVPN package.</p>
<p>There it is :</p>
<pre>
#!/bin/bash
# 
# Parses DHCP options from openvpn to update resolv.conf
# To use set as 'up' and 'down' script in your openvpn *.conf:
# up /etc/openvpn/update-resolv-conf
# down /etc/openvpn/update-resolv-conf
#
# Used snippets of resolvconf script by Thomas Hood &lt;jdthood@yahoo.co.uk&gt; 
# and Chris Hanson
# Licensed under the GNU GPL.  See /usr/share/common-licenses/GPL. 
#
# 05/2006 chlauber@bnc.ch
# 
# Example envs set from openvpn:
# foreign_option_1='dhcp-option DNS 193.43.27.132'
# foreign_option_2='dhcp-option DNS 193.43.27.133'
# foreign_option_3='dhcp-option DOMAIN be.bnc.ch'

[ -x /sbin/resolvconf ] || exit 0

case $script_type in

up)
	for optionname in ${!foreign_option_*} ; do
		option=&quot;${!optionname}&quot;
		echo $option
		part1=$(echo &quot;$option&quot; | cut -d &quot; &quot; -f 1)
		if [ &quot;$part1&quot; == &quot;dhcp-option&quot; ] ; then
			part2=$(echo &quot;$option&quot; | cut -d &quot; &quot; -f 2)
			part3=$(echo &quot;$option&quot; | cut -d &quot; &quot; -f 3)
			if [ &quot;$part2&quot; == &quot;DNS&quot; ] ; then
				IF_DNS_NAMESERVERS=&quot;$IF_DNS_NAMESERVERS $part3&quot;
			fi
			if [ &quot;$part2&quot; == &quot;DOMAIN&quot; ] ; then
				IF_DNS_SEARCH=&quot;$part3&quot;
			fi
		fi
	done
	R=&quot;&quot;
	if [ &quot;$IF_DNS_SEARCH&quot; ] ; then
        	R=&quot;${R}search $IF_DNS_SEARCH&quot;
	fi
	for NS in $IF_DNS_NAMESERVERS ; do
        	R=&quot;${R}nameserver $NS&quot;
	done
	echo -n &quot;$R&quot; | /sbin/resolvconf -a &quot;${dev}.inet&quot;
	;;
down)
	/sbin/resolvconf -d &quot;${dev}.inet&quot;
	;;
esac
</pre>
]]></content:encoded>
			<wfw:commentRss>/blog-archive/2006/12/07/openvpn-and-dns-on-a-linux-client.html/feed</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
	</channel>
</rss>
