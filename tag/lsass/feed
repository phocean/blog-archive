<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>lsass &#8211; Phocean.net</title>
	<atom:link href="/blog-archive/tag/lsass/feed" rel="self" type="application/rss+xml" />
	<link>/blog-archive</link>
	<description>Computer Security Blog</description>
	<lastBuildDate>Fri, 24 Feb 2017 21:17:51 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.10</generator>
	<item>
		<title>Password stealing using a password filter</title>
		<link>/blog-archive/2013/10/02/password-stealing-using-a-password-filter.html</link>
		<comments>/blog-archive/2013/10/02/password-stealing-using-a-password-filter.html#comments</comments>
		<pubDate>Wed, 02 Oct 2013 09:12:31 +0000</pubDate>
		<dc:creator><![CDATA[phocean]]></dc:creator>
				<category><![CDATA[Pentesting]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[System]]></category>
		<category><![CDATA[Windows]]></category>
		<category><![CDATA[backdoor]]></category>
		<category><![CDATA[IDA Pro]]></category>
		<category><![CDATA[lsass]]></category>
		<category><![CDATA[password]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[Sysinternals]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">http://www.phocean.net/?p=1736</guid>
		<description><![CDATA[Nice stuff from @mubix: the technic consists in injecting a DLL to lsass.exe, using the password filter feature of Windows. The password filter architecture is useful to check that a password is compliant with the system security policy. It will typically check that when a user changes his password, it follows the required complexity. Microsoft...<br><i class="icon-right-hand"></i> <span class="read-more"><a href="/blog-archive/2013/10/02/password-stealing-using-a-password-filter.html">Continue Reading</a></span>]]></description>
				<content:encoded><![CDATA[<p><a href="http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html">Nice stuff</a> from <a href="https://twitter.com/mubix">@mubix</a>: the technic consists in injecting a DLL to <code>lsass.exe</code>, using the <em>password filter</em> feature of Windows.</p>
<p>The password filter architecture is useful to check that a password is compliant with the system security policy. It will typically check that when a user changes his password, it follows the required complexity.</p>
<p>Microsoft opened the API so that users can extend the functionality with their own filters.</p>
<p>Mubix diverted this API by developing a password logger: the DLL just logs the password both on the disk and a remote server,  and does nothing else.</p>
<p>A perfect way to maintain a persistent access… I tested it:</p>
<div id="attachment_1738" style="width: 635px" class="wp-caption aligncenter"><a href="/blog-archive/wp-content/uploads/2013/10/CapturFiles_14.png" rel="lightbox[1736]"><img class="size-large wp-image-1738" alt="Evilpassfilter exploitation process" src="/blog-archive/wp-content/uploads/2013/10/CapturFiles_14-940x587.png" width="625" height="390" srcset="/blog-archive/wp-content/uploads/2013/10/CapturFiles_14-940x587.png 940w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_14-580x362.png 580w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_14-624x389.png 624w" sizes="(max-width: 625px) 100vw, 625px" /></a><p class="wp-caption-text">Evilpassfilter exploitation process</p></div>
<ol>
<li><code>Evilpassfilter.dll</code> is loaded into <code>lsass.exe</code></li>
<li>A user updates his password</li>
<li>The password goes through the <em>Evilpassfilter </em>password filter, which notifies the attacker through HTTP and also logs it locally.</li>
</ol>
<p>Here is what I did to get it work (Windows 7 x64):</p>
<ul>
<li>Make sure the local password security policy is enabled on the target</li>
<li>Create a new Win32 project in Visual Studio (2012)</li>
<li>Eventually delete unnecessary files, to start with an empty project (<code>stadfx.h</code> and cie)</li>
<li>Import the <a title="Evilpassfilter" href="https://gist.github.com/mubix/6514311#file-evilpassfilter-cpp">source code</a></li>
<li>Create a <code>Evilpassfilter.def</code> file, which defines the exports:
<pre>LIBRARY Evilpassfilter
EXPORTS
   InitializeChangeNotify
   PasswordFilter
   PasswordChangeNotify</pre>
</li>
<li>In the project properties, make sure to select the appropriate architecture, matching with the one of your target.
<p><div id="attachment_1745" style="width: 590px" class="wp-caption aligncenter"><a href="/blog-archive/wp-content/uploads/2013/10/CapturFiles_18.png" rel="lightbox[1736]"><img class="size-medium wp-image-1745" alt="Selecting the compilation target architecture (win32/x64)" src="/blog-archive/wp-content/uploads/2013/10/CapturFiles_18-580x133.png" width="580" height="133" srcset="/blog-archive/wp-content/uploads/2013/10/CapturFiles_18-580x133.png 580w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_18-624x143.png 624w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_18.png 725w" sizes="(max-width: 580px) 100vw, 580px" /></a><p class="wp-caption-text">Selecting the compilation target architecture (win32/x64)</p></div></li>
<li>In the input settings of the link editor, add wininet.lib as additional dependancy.</li>
<li>Also add <code>Evilpassfilter.def</code> as module definition file.
<p><div id="attachment_1743" style="width: 590px" class="wp-caption aligncenter"><a href="/blog-archive/wp-content/uploads/2013/10/CapturFiles_16.png" rel="lightbox[1736]"><img class="size-medium wp-image-1743" alt="Evilpassfilter Visual Studio settings" src="/blog-archive/wp-content/uploads/2013/10/CapturFiles_16-580x413.png" width="580" height="413" srcset="/blog-archive/wp-content/uploads/2013/10/CapturFiles_16-580x413.png 580w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_16-624x444.png 624w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_16.png 859w" sizes="(max-width: 580px) 100vw, 580px" /></a><p class="wp-caption-text">Evilpassfilter Visual Studio settings</p></div></li>
<li>In the source code, fix line 72: <code>return;</code> &#8211;&gt; <code>return 1;</code></li>
<li>Now you should be able to compile the library. You may want to make sure that the DLL is valid and integrated the exports (open it with IDA or a PE tool):
<p><div id="attachment_1741" style="width: 913px" class="wp-caption aligncenter"><a href="/blog-archive/wp-content/uploads/2013/10/CapturFiles_19.png" rel="lightbox[1736]"><img class="size-full wp-image-1741" alt="Evilpassfilter.dll exports seen in IDA" src="/blog-archive/wp-content/uploads/2013/10/CapturFiles_19.png" width="903" height="226" srcset="/blog-archive/wp-content/uploads/2013/10/CapturFiles_19.png 903w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_19-580x145.png 580w, /blog-archive/wp-content/uploads/2013/10/CapturFiles_19-624x156.png 624w" sizes="(max-width: 903px) 100vw, 903px" /></a><p class="wp-caption-text">Evilpassfilter.dll exports seen in IDA</p></div></li>
<li>Copy the resulting DLL to the <code>system32</code> folder.</li>
<li>Open regedit <code>HKLM\System\CurrentControlSet\Control\Lsa</code><br />
and add <code>Evilpassfilter</code> to the <code>Notification Packages</code></li>
</ul>
<p>Reboot and… now you should know what to do next :-)</p>
]]></content:encoded>
			<wfw:commentRss>/blog-archive/2013/10/02/password-stealing-using-a-password-filter.html/feed</wfw:commentRss>
		<slash:comments>18</slash:comments>
		</item>
	</channel>
</rss>
